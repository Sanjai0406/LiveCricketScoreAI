import requests
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.document_loaders import TextLoader

# You can use any cricket API here; This is a dummy example with Cricket API site

API_KEY = 'your_api_key_here'  # Replace with your API key
API_URL = 'https://api.cricapi.com/v1/currentMatches?apikey=' + API_KEY

def fetch_cricket_scores():
    response = requests.get(API_URL)
    if response.status_code == 200:
        data = response.json()
        matches = data.get('data', [])
        summary_list = []
        for match in matches:
            summary = f"{match.get('name')} - {match.get('status')}"
            summary_list.append(summary)
        return "\n".join(summary_list)
    else:
        return "Failed to fetch live cricket scores."

# Save the fetched scores to a file (works as RAG Data Source)
def save_scores_to_file():
    scores = fetch_cricket_scores()
    with open('live_scores.txt', 'w') as f:
        f.write(scores)
    return scores

# AI Answering System with LangChain RAG
def ai_query_on_scores():
    save_scores_to_file()

    loader = TextLoader('live_scores.txt')
    documents = loader.load()

    text_splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    docs = text_splitter.split_documents(documents)

    embeddings = OpenAIEmbeddings()
    db = FAISS.from_documents(docs, embeddings)

    llm = OpenAI(temperature=0)
    qa = RetrievalQA.from_chain_type(llm=llm, chain_type="stuff", retriever=db.as_retriever())

    print("\nWelcome to Live Cricket Score AI Assistant!")
    print("Type 'exit' to quit.\n")

    while True:
        query = input("You: ")
        if query.lower() == 'exit':
            print("Goodbye! Thank you for using Live Cricket Score AI.")
            break
        answer = qa.run(query)
        print(f"AI: {answer}")

if __name__ == '__main__':
    ai_query_on_scores()
